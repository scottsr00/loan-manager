generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Entity {
  id                String              @id @default(cuid())
  legalName         String
  dba              String?             // Doing Business As (optional)
  registrationNumber String?           // Legal registration number
  taxId            String?             // Tax ID / EIN
  entityType       EntityType          @relation(fields: [entityTypeId], references: [id])
  entityTypeId     String
  status           String              @default("ACTIVE")  // Values: ACTIVE, INACTIVE, PENDING, DISSOLVED
  incorporationDate DateTime?
  fiscalYearEnd    String?            // e.g., "12-31"
  website          String?
  description      String?
  addresses        EntityAddress[]
  contacts         EntityContact[]
  documents        EntityDocument[]
  relationships    EntityRelationship[] @relation("FromEntity")
  relatedTo        EntityRelationship[] @relation("ToEntity")
  agentAgreements   CreditAgreement[] @relation("AgentBank")
  borrowerProfile  Borrower?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt

  @@index([entityTypeId])
}

model EntityType {
  id          String    @id @default(cuid())
  name        String    @unique // e.g., "Corporation", "LLC", "Partnership"
  description String?
  entities    Entity[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model EntityAddress {
  id          String    @id @default(cuid())
  entity      Entity    @relation(fields: [entityId], references: [id])
  entityId    String
  type        String    // Values: REGISTERED, MAILING, PHYSICAL, BILLING
  street1     String
  street2     String?
  city        String
  state       String?
  postalCode  String?
  country     String
  isPrimary   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([entityId])
}

model EntityContact {
  id          String    @id @default(cuid())
  entity      Entity    @relation(fields: [entityId], references: [id])
  entityId    String
  type        String    // Values: DIRECTOR, OFFICER, LEGAL_REPRESENTATIVE, AUTHORIZED_SIGNATORY, ADMINISTRATOR
  firstName   String
  lastName    String
  title       String?
  email       String?
  phone       String?
  mobile      String?
  isPrimary   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([entityId])
}

model EntityDocument {
  id          String    @id @default(cuid())
  entity      Entity    @relation(fields: [entityId], references: [id])
  entityId    String
  type        String    // Values: INCORPORATION, LICENSE, REGISTRATION, TAX, REGULATORY, CERTIFICATION
  title       String
  description String?
  fileUrl     String
  fileType    String
  validFrom   DateTime?
  validTo     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([entityId])
}

model EntityRelationship {
  id            String    @id @default(cuid())
  fromEntity    Entity    @relation("FromEntity", fields: [fromEntityId], references: [id])
  fromEntityId  String
  toEntity      Entity    @relation("ToEntity", fields: [toEntityId], references: [id])
  toEntityId    String
  type          String    // Values: PARENT, SUBSIDIARY, BRANCH, AFFILIATE, JOINT_VENTURE, PARTNERSHIP
  ownership     Float?    // Percentage of ownership if applicable
  startDate     DateTime
  endDate       DateTime?
  description   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([fromEntityId])
  @@index([toEntityId])
}

model CreditAgreement {
  id                String      @id @default(cuid())
  agreementName     String
  agreementNumber   String      @unique
  borrower          Borrower    @relation("BorrowerAgreements", fields: [borrowerId], references: [id])
  borrowerId        String
  agent            Entity      @relation("AgentBank", fields: [agentBankId], references: [id])
  agentBankId      String
  status           String      @default("ACTIVE")  // ACTIVE, TERMINATED, DEFAULTED, MATURED
  effectiveDate    DateTime
  maturityDate     DateTime
  totalAmount      Float
  currency         String      @default("USD")
  facilities       Facility[]
  description      String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  @@index([borrowerId])
  @@index([agentBankId])
}

model Facility {
  id                String      @id @default(cuid())
  facilityName      String
  facilityType      String      // REVOLVING, TERM, DELAYED_DRAW
  creditAgreement   CreditAgreement @relation(fields: [creditAgreementId], references: [id])
  creditAgreementId String
  status           String      @default("ACTIVE")  // ACTIVE, TERMINATED, DEFAULTED, MATURED
  commitmentAmount Float
  currency         String      @default("USD")
  startDate        DateTime
  maturityDate     DateTime
  interestType     String      // FIXED, FLOATING
  baseRate         String      // SOFR, PRIME, etc.
  margin           Float
  description      String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  @@index([creditAgreementId])
}

model Borrower {
  id                    String    @id @default(cuid())
  entity                Entity    @relation(fields: [entityId], references: [id])
  entityId              String    @unique
  
  // Onboarding Status
  onboardingStatus      String    @default("PENDING")  // PENDING, IN_PROGRESS, COMPLETED, REJECTED
  onboardingDate        DateTime?
  approvalDate          DateTime?
  lastReviewDate        DateTime?
  nextReviewDate        DateTime?
  
  // Credit Profile
  creditRating          String?   // e.g., AAA, AA+, etc.
  ratingAgency          String?   // e.g., S&P, Moody's, Fitch
  ratingDate            DateTime?
  watchStatus           String?   // NONE, POSITIVE, NEGATIVE
  
  // Financial Information
  annualRevenue         Float?
  totalAssets           Float?
  totalLiabilities      Float?
  netWorth              Float?
  fiscalYearEnd         String?   // e.g., "12-31"
  lastFinancialsDate    DateTime?
  
  // Documentation Status
  documentationStatus   String    @default("INCOMPLETE") // INCOMPLETE, IN_PROGRESS, COMPLETE, EXPIRED
  requiredDocuments     BorrowerRequiredDocument[]
  financialStatements   BorrowerFinancialStatement[]
  covenants             BorrowerCovenant[]
  
  // Risk Assessment
  riskRating           String?   // LOW, MEDIUM, HIGH
  riskRatingDate       DateTime?
  riskComments         String?
  
  // Industry Classification
  sicCode              String?
  naicsCode            String?
  industrySegment      String?
  
  // Compliance
  amlStatus            String    @default("PENDING")  // PENDING, CLEARED, FLAGGED
  kycStatus            String    @default("PENDING")  // PENDING, IN_PROGRESS, APPROVED, REJECTED
  sanctionsScreening   String    @default("PENDING")  // PENDING, CLEARED, FLAGGED
  lastScreeningDate    DateTime?
  
  // Relationship
  relationshipManager  String?
  customerSince        DateTime?
  creditAgreements     CreditAgreement[] @relation("BorrowerAgreements")
  
  // Audit Trail
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@index([entityId])
}

model BorrowerRequiredDocument {
  id                String    @id @default(cuid())
  borrower          Borrower  @relation(fields: [borrowerId], references: [id])
  borrowerId        String
  documentType      String    // FINANCIAL_STATEMENTS, TAX_RETURNS, CORPORATE_RESOLUTION, CERTIFICATE_OF_INCUMBENCY, etc.
  status            String    @default("PENDING")  // PENDING, RECEIVED, APPROVED, REJECTED, EXPIRED
  required          Boolean   @default(true)
  documentUrl       String?
  submissionDate    DateTime?
  expirationDate    DateTime?
  comments          String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([borrowerId])
}

model BorrowerFinancialStatement {
  id                String    @id @default(cuid())
  borrower          Borrower  @relation(fields: [borrowerId], references: [id])
  borrowerId        String
  statementType     String    // ANNUAL, QUARTERLY, INTERIM
  statementDate     DateTime
  periodEnd         DateTime
  revenue           Float?
  ebitda            Float?
  netIncome         Float?
  totalAssets       Float?
  totalLiabilities  Float?
  totalEquity       Float?
  cashFlow          Float?
  workingCapital    Float?
  documentUrl       String?
  auditStatus       String    @default("UNAUDITED")  // UNAUDITED, AUDITED, REVIEWED
  auditor           String?
  comments          String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([borrowerId])
}

model BorrowerCovenant {
  id                String    @id @default(cuid())
  borrower          Borrower  @relation(fields: [borrowerId], references: [id])
  borrowerId        String
  covenantType      String    // FINANCIAL, NEGATIVE, AFFIRMATIVE, INFORMATION
  description       String
  threshold         Float?
  frequency         String    // QUARTERLY, SEMI_ANNUAL, ANNUAL
  status            String    @default("COMPLIANT")  // COMPLIANT, NON_COMPLIANT, WAIVED
  lastTestDate      DateTime?
  nextTestDate      DateTime?
  comments          String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([borrowerId])
}
