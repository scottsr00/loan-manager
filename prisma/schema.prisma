generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Loan {
  id                      String           @id @default(cuid())
  dealName                String
  currentBalance          Float
  currentPeriodTerms      String
  priorPeriodPaymentStatus String
  agentBank               String
  borrower                String          @default("Unknown")
  startDate               DateTime        @default(now())
  maturityDate           DateTime
  lenderPositions         LenderPosition[]
  trades                  Trade[]
  servicingActivities     ServicingActivity[]
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @default(now()) @updatedAt
}

model Lender {
  id              String           @id @default(cuid())
  name            String           @unique
  lenderPositions LenderPosition[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
}

model LenderPosition {
  id        String   @id @default(cuid())
  loan      Loan     @relation(fields: [loanId], references: [id])
  loanId    String
  lender    Lender   @relation(fields: [lenderId], references: [id])
  lenderId  String
  balance   Float
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Trade {
  id                    Int                @id @default(autoincrement())
  loanId                String
  quantity              Float
  price                 Float
  counterparty          String
  tradeDate            DateTime
  expectedSettlementDate DateTime
  accruedInterest      Float
  status               String             // 'Open' or 'Completed'
  tradeType            String             // 'Buy' or 'Sell'
  historicalBalances   HistoricalBalance[]
  costOfCarryAccrued   Float              @default(0)
  lastCarryCalculation DateTime?
  comments             TradeComment[]
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  loan                 Loan               @relation(fields: [loanId], references: [id])
}

model HistoricalBalance {
  id        Int      @id @default(autoincrement())
  tradeId   Int
  date      String
  balance   Float
  trade     Trade    @relation(fields: [tradeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TradeComment {
  id        Int      @id @default(autoincrement())
  tradeId   Int
  author    String   // Can be 'Buyer', 'Seller', or 'Agent'
  content   String
  createdAt DateTime @default(now())
  trade     Trade    @relation(fields: [tradeId], references: [id])

  @@index([tradeId])
}

model ServicingActivity {
  id              Int      @id @default(autoincrement())
  loanId          String
  activityType    String   // e.g., 'Payment', 'Rate Change', 'Amendment', 'Notice'
  status          String   // e.g., 'Pending', 'Completed', 'Failed'
  dueDate         DateTime
  completedDate   DateTime?
  description     String
  amount          Float?
  rateChange      Float?
  assignedTo      String?
  priority        String   // e.g., 'High', 'Medium', 'Low'
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  loan            Loan     @relation(fields: [loanId], references: [id])

  @@index([loanId])
  @@index([dueDate])
  @@index([status])
}
