generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Entity {
  id                    String            @id @default(cuid())
  legalName             String
  dba                   String?
  registrationNumber    String?
  taxId                 String?
  dateOfBirth           DateTime?
  dateOfIncorporation   DateTime?
  countryOfIncorporation String?
  governmentId          String?
  governmentIdType      String?
  governmentIdExpiry    DateTime?
  primaryContactName    String?
  primaryContactEmail   String?
  primaryContactPhone   String?
  status                String            @default("ACTIVE")
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  addresses             Address[]
  beneficialOwners      BeneficialOwner[]
  borrower              Borrower?
  contacts              Contact[]
  lenderAgreements      CreditAgreement[] @relation("LenderCreditAgreements")
  borrowerAgreements    CreditAgreement[] @relation("BorrowerCreditAgreements")
  lender                Lender?
}

model Address {
  id         String   @id @default(cuid())
  entityId   String
  type       String
  street1    String
  street2    String?
  city       String
  state      String?
  postalCode String?
  country    String
  isPrimary  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  entity     Entity   @relation(fields: [entityId], references: [id])

  @@index([entityId])
}

model Contact {
  id        String   @id @default(cuid())
  entityId  String
  type      String
  firstName String
  lastName  String
  title     String?
  email     String?
  phone     String?
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  entity    Entity   @relation(fields: [entityId], references: [id])

  @@index([entityId])
}

model BeneficialOwner {
  id                  String    @id @default(cuid())
  entityId            String
  name                String
  dateOfBirth         DateTime?
  nationality         String?
  ownershipPercentage Float
  controlType         String
  verificationStatus  String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  entity              Entity    @relation(fields: [entityId], references: [id])

  @@index([entityId])
}

model Borrower {
  id               String   @id @default(cuid())
  entityId         String   @unique
  industrySegment  String?
  businessType     String?
  creditRating     String?
  ratingAgency     String?
  riskRating       String?
  onboardingStatus String   @default("PENDING")
  kycStatus        String   @default("PENDING")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  entity           Entity   @relation(fields: [entityId], references: [id])

  @@index([entityId])
}

model Lender {
  id                String             @id @default(cuid())
  entityId          String             @unique
  status            String             @default("ACTIVE")
  onboardingDate    DateTime           @default(now())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  facilityPositions FacilityPosition[]
  entity            Entity             @relation(fields: [entityId], references: [id])

  @@index([entityId])
}

model CreditAgreement {
  id              String               @id @default(cuid())
  agreementNumber String               @unique
  borrowerId      String
  lenderId        String
  status          String               @default("ACTIVE")
  amount          Float
  currency        String               @default("USD")
  startDate       DateTime
  maturityDate    DateTime
  interestRate    Float
  description     String?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  borrower        Entity               @relation("BorrowerCreditAgreements", fields: [borrowerId], references: [id])
  lender          Entity               @relation("LenderCreditAgreements", fields: [lenderId], references: [id])
  facilities      Facility[]
  transactions    TransactionHistory[]

  @@index([borrowerId])
  @@index([lenderId])
}

model Facility {
  id                   String                @id @default(cuid())
  facilityName         String
  facilityType         String
  creditAgreementId    String
  commitmentAmount     Float
  availableAmount      Float
  currency             String                @default("USD")
  startDate            DateTime
  maturityDate         DateTime
  interestType         String
  baseRate             String
  margin               Float
  description          String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  creditAgreement      CreditAgreement       @relation(fields: [creditAgreementId], references: [id])
  positions            FacilityPosition[]
  sublimits            FacilitySublimit[]
  loans                Loan[]
  servicingActivities  ServicingActivity[]
  servicingAssignments ServicingAssignment[]
  trades               Trade[]

  @@index([creditAgreementId])
}

model FacilityPosition {
  id         String   @id @default(cuid())
  facilityId String
  lenderId   String
  amount     Float
  share      Float    // Share percentage (0-100)
  status     String   @default("ACTIVE")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  lender     Lender   @relation(fields: [lenderId], references: [id])
  facility   Facility @relation(fields: [facilityId], references: [id])

  @@index([facilityId])
  @@index([lenderId])
}

model FacilitySublimit {
  id          String   @id @default(cuid())
  facilityId  String
  type        String
  amount      Float
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  facility    Facility @relation(fields: [facilityId], references: [id])

  @@index([facilityId])
}

model Loan {
  id               String               @id @default(cuid())
  facilityId       String
  amount           Float
  outstandingAmount Float
  currency         String               @default("USD")
  status           String               @default("ACTIVE")
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  facility         Facility             @relation(fields: [facilityId], references: [id])
  transactions     TransactionHistory[]

  @@index([facilityId])
}

model Trade {
  id             String               @id @default(cuid())
  facilityId     String
  counterpartyId String
  tradeDate      DateTime
  settlementDate DateTime
  amount         Float
  price          Float
  status         String               @default("PENDING")
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  counterparty   Counterparty         @relation(fields: [counterpartyId], references: [id])
  facility       Facility             @relation(fields: [facilityId], references: [id])
  transactions   TransactionHistory[]

  @@index([facilityId])
  @@index([counterpartyId])
}

model TransactionHistory {
  id                  String             @id @default(cuid())
  creditAgreementId   String?
  loanId              String?
  tradeId             String?
  servicingActivityId String?
  activityType        String
  amount              Float
  currency            String             @default("USD")
  status              String             @default("PENDING")
  description         String?
  effectiveDate       DateTime
  processedBy         String
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  creditAgreement     CreditAgreement?   @relation(fields: [creditAgreementId], references: [id])
  loan                Loan?              @relation(fields: [loanId], references: [id])
  servicingActivity   ServicingActivity? @relation(fields: [servicingActivityId], references: [id])
  trade               Trade?             @relation(fields: [tradeId], references: [id])

  @@index([creditAgreementId])
  @@index([loanId])
  @@index([tradeId])
  @@index([servicingActivityId])
}

model ServicingActivity {
  id                 String               @id @default(cuid())
  facilityId         String
  activityType       String
  dueDate            DateTime
  description        String?
  amount             Float
  status             String               @default("PENDING")
  completedAt        DateTime?
  completedBy        String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  facility           Facility             @relation(fields: [facilityId], references: [id])
  transactions       TransactionHistory[]

  @@index([facilityId])
}

model Counterparty {
  id             String               @id @default(cuid())
  name           String
  typeId         String
  type           CounterpartyType     @relation(fields: [typeId], references: [id])
  status         String               @default("ACTIVE")
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  trades         Trade[]
  addresses      CounterpartyAddress[]
  contacts       CounterpartyContact[]

  @@index([typeId])
}

model CounterpartyType {
  id             String        @id @default(cuid())
  name           String        @unique
  description    String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  counterparties Counterparty[]
}

model CounterpartyAddress {
  id             String      @id @default(cuid())
  counterpartyId String
  counterparty   Counterparty @relation(fields: [counterpartyId], references: [id])
  type           String
  street1        String
  street2        String?
  city           String
  state          String?
  postalCode     String?
  country        String
  isPrimary      Boolean     @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([counterpartyId])
}

model CounterpartyContact {
  id             String      @id @default(cuid())
  counterpartyId String
  counterparty   Counterparty @relation(fields: [counterpartyId], references: [id])
  type           String
  firstName      String
  lastName       String
  title          String?
  email          String?
  phone          String?
  isPrimary      Boolean     @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([counterpartyId])
}

model ServicingRole {
  id          String                 @id @default(cuid())
  name        String                 @unique
  description String
  permissions String
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  teamMembers ServicingTeamMember[]
}

model ServicingTeamMember {
  id          String                @id @default(cuid())
  name        String
  email       String                @unique
  roleId      String
  status      String                @default("ACTIVE")
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  role        ServicingRole         @relation(fields: [roleId], references: [id])
  assignments ServicingAssignment[]

  @@index([roleId])
}

model ServicingAssignment {
  id             String               @id @default(cuid())
  teamMemberId   String
  facilityId     String
  assignmentType String               @default("PRIMARY_AGENT")
  startDate      DateTime
  endDate        DateTime?
  status         String               @default("ACTIVE")
  notes          String?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  teamMember     ServicingTeamMember  @relation(fields: [teamMemberId], references: [id])
  facility       Facility             @relation(fields: [facilityId], references: [id])

  @@index([teamMemberId])
  @@index([facilityId])
}
