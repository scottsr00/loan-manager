generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Loan {
  id                      String           @id @default(cuid())
  dealName                String
  facility               Facility         @relation(fields: [facilityId], references: [id])
  facilityId             String
  currentBalance          Float
  currentPeriodTerms      String
  priorPeriodPaymentStatus String
  agentBank               String
  borrower                String          @default("Unknown")
  startDate               DateTime        @default(now())
  maturityDate           DateTime
  lenderPositions         LenderPosition[]
  trades                  Trade[]
  servicingActivities     ServicingActivity[]
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @default(now()) @updatedAt

  @@index([facilityId])
}

model Lender {
  id              String           @id @default(cuid())
  name            String           @unique
  lenderPositions LenderPosition[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
}

model LenderPosition {
  id        String   @id @default(cuid())
  loan      Loan     @relation(fields: [loanId], references: [id])
  loanId    String
  lender    Lender   @relation(fields: [lenderId], references: [id])
  lenderId  String
  balance   Float
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Trade {
  id                    Int                @id @default(autoincrement())
  loanId                String
  quantity              Float
  price                 Float
  counterparty          String
  tradeDate            DateTime
  expectedSettlementDate DateTime
  accruedInterest      Float
  status               String             // 'Open' or 'Completed'
  tradeType            String             // 'Buy' or 'Sell'
  historicalBalances   HistoricalBalance[]
  costOfCarryAccrued   Float              @default(0)
  lastCarryCalculation DateTime?
  comments             TradeComment[]
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  loan                 Loan               @relation(fields: [loanId], references: [id])
}

model HistoricalBalance {
  id        Int      @id @default(autoincrement())
  tradeId   Int
  date      String
  balance   Float
  trade     Trade    @relation(fields: [tradeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TradeComment {
  id        Int      @id @default(autoincrement())
  tradeId   Int
  author    String   // Can be 'Buyer', 'Seller', or 'Agent'
  content   String
  createdAt DateTime @default(now())
  trade     Trade    @relation(fields: [tradeId], references: [id])

  @@index([tradeId])
}

model ServicingActivity {
  id              Int      @id @default(autoincrement())
  loanId          String
  activityType    String   // e.g., 'Payment', 'Rate Change', 'Amendment', 'Notice'
  status          String   // e.g., 'Pending', 'Completed', 'Failed'
  dueDate         DateTime
  completedDate   DateTime?
  description     String
  amount          Float?
  rateChange      Float?
  assignedTo      String?
  priority        String   // e.g., 'High', 'Medium', 'Low'
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  loan            Loan     @relation(fields: [loanId], references: [id])

  @@index([loanId])
  @@index([dueDate])
  @@index([status])
}

model Entity {
  id                String              @id @default(cuid())
  legalName         String
  dba              String?             // Doing Business As (optional)
  registrationNumber String?           // Legal registration number
  taxId            String?             // Tax ID / EIN
  entityType       EntityType          @relation(fields: [entityTypeId], references: [id])
  entityTypeId     String
  status           String              @default("ACTIVE")  // Values: ACTIVE, INACTIVE, PENDING, DISSOLVED
  incorporationDate DateTime?
  fiscalYearEnd    String?            // e.g., "12-31"
  website          String?
  description      String?
  addresses        EntityAddress[]
  contacts         EntityContact[]
  documents        EntityDocument[]
  relationships    EntityRelationship[] @relation("FromEntity")
  relatedTo        EntityRelationship[] @relation("ToEntity")
  borrowerAgreements CreditAgreement[] @relation("Borrower")
  agentAgreements   CreditAgreement[] @relation("AgentBank")
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt

  @@index([entityTypeId])
}

model EntityType {
  id          String    @id @default(cuid())
  name        String    @unique // e.g., "Corporation", "LLC", "Partnership"
  description String?
  entities    Entity[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model EntityAddress {
  id          String    @id @default(cuid())
  entity      Entity    @relation(fields: [entityId], references: [id])
  entityId    String
  type        String    // Values: REGISTERED, MAILING, PHYSICAL, BILLING
  street1     String
  street2     String?
  city        String
  state       String?
  postalCode  String?
  country     String
  isPrimary   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([entityId])
}

model EntityContact {
  id          String    @id @default(cuid())
  entity      Entity    @relation(fields: [entityId], references: [id])
  entityId    String
  type        String    // Values: DIRECTOR, OFFICER, LEGAL_REPRESENTATIVE, AUTHORIZED_SIGNATORY, ADMINISTRATOR
  firstName   String
  lastName    String
  title       String?
  email       String?
  phone       String?
  mobile      String?
  isPrimary   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([entityId])
}

model EntityDocument {
  id          String    @id @default(cuid())
  entity      Entity    @relation(fields: [entityId], references: [id])
  entityId    String
  type        String    // Values: INCORPORATION, LICENSE, REGISTRATION, TAX, REGULATORY, CERTIFICATION
  title       String
  description String?
  fileUrl     String
  fileType    String
  validFrom   DateTime?
  validTo     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([entityId])
}

model EntityRelationship {
  id            String    @id @default(cuid())
  fromEntity    Entity    @relation("FromEntity", fields: [fromEntityId], references: [id])
  fromEntityId  String
  toEntity      Entity    @relation("ToEntity", fields: [toEntityId], references: [id])
  toEntityId    String
  type          String    // Values: PARENT, SUBSIDIARY, BRANCH, AFFILIATE, JOINT_VENTURE, PARTNERSHIP
  ownership     Float?    // Percentage of ownership if applicable
  startDate     DateTime
  endDate       DateTime?
  description   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([fromEntityId])
  @@index([toEntityId])
}

model Counterparty {
  id                String              @id @default(cuid())
  legalName         String
  parentName        String?
  ultParentName     String?
  counterpartyType  CounterpartyType    @relation(fields: [counterpartyTypeId], references: [id])
  counterpartyTypeId String
  kycStatus         String              @default("PENDING")  // PENDING, IN_PROGRESS, APPROVED, REJECTED
  onboardingStatus  String              @default("NEW")      // NEW, IN_PROGRESS, COMPLETED, REJECTED
  registrationNumber String?            // Legal registration number
  taxId            String?              // Tax ID / EIN
  incorporationDate DateTime?
  website          String?
  description      String?
  addresses        CounterpartyAddress[]
  contacts         CounterpartyContact[]
  documents        CounterpartyDocument[]
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt

  @@index([counterpartyTypeId])
}

model CounterpartyType {
  id            String        @id @default(cuid())
  name          String        @unique  // e.g., "Bank", "Broker-Dealer", "Investment Manager", "Insurance Company"
  description   String?
  counterparties Counterparty[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model CounterpartyAddress {
  id            String        @id @default(cuid())
  counterparty  Counterparty  @relation(fields: [counterpartyId], references: [id])
  counterpartyId String
  type          String        // Values: REGISTERED, MAILING, PHYSICAL, BILLING
  street1       String
  street2       String?
  city          String
  state         String?
  postalCode    String?
  country       String
  isPrimary     Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([counterpartyId])
}

model CounterpartyContact {
  id            String        @id @default(cuid())
  counterparty  Counterparty  @relation(fields: [counterpartyId], references: [id])
  counterpartyId String
  type          String        // Values: DIRECTOR, OFFICER, LEGAL_REPRESENTATIVE, AUTHORIZED_SIGNATORY, ADMINISTRATOR
  firstName     String
  lastName      String
  title         String?
  email         String?
  phone         String?
  mobile        String?
  isPrimary     Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([counterpartyId])
}

model CounterpartyDocument {
  id            String        @id @default(cuid())
  counterparty  Counterparty  @relation(fields: [counterpartyId], references: [id])
  counterpartyId String
  type          String        // Values: KYC, ONBOARDING, LICENSE, REGISTRATION, TAX, REGULATORY, CERTIFICATION
  title         String
  description   String?
  fileUrl       String
  fileType      String
  validFrom     DateTime?
  validTo       DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([counterpartyId])
}

model CreditAgreement {
  id                String      @id @default(cuid())
  agreementName     String
  agreementNumber   String      @unique
  borrower          Entity      @relation("Borrower", fields: [borrowerId], references: [id])
  borrowerId        String
  agent            Entity      @relation("AgentBank", fields: [agentBankId], references: [id])
  agentBankId      String
  status           String      @default("ACTIVE")  // ACTIVE, TERMINATED, DEFAULTED, MATURED
  effectiveDate    DateTime
  maturityDate     DateTime
  totalAmount      Float
  currency         String      @default("USD")
  facilities       Facility[]
  description      String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  @@index([borrowerId])
  @@index([agentBankId])
}

model Facility {
  id                String      @id @default(cuid())
  facilityName      String
  facilityType      String      // REVOLVING, TERM, DELAYED_DRAW
  creditAgreement   CreditAgreement @relation(fields: [creditAgreementId], references: [id])
  creditAgreementId String
  status           String      @default("ACTIVE")  // ACTIVE, TERMINATED, DEFAULTED, MATURED
  commitmentAmount Float
  currency         String      @default("USD")
  startDate        DateTime
  maturityDate     DateTime
  interestType     String      // FIXED, FLOATING
  baseRate         String      // SOFR, PRIME, etc.
  margin           Float
  loans            Loan[]
  description      String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  @@index([creditAgreementId])
}
